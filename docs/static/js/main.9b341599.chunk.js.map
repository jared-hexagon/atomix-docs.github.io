{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PropsTable","propDefs","editProp","useState","editingId","setEditingId","length","map","propDef","id","PropEditor","prefilledValues","onSubmit","editedFields","name","description","isRequired","defaultValue","default","notes","example","onClick","fieldValues","setFieldValues","updateFieldValue","value","e","preventDefault","width","type","onChange","target","checked","TypesTable","typesDefs","editType","typeDef","TypeEditor","className","formats","FormatSelector","selectedFormat","sortAlphabetically","arr","sort","nameA","nameB","localeCompare","fieldId","App","aboutTab","setAboutTab","usageTab","setUsageTab","setPropDefs","setTypesDefs","compatibilityTab","setCompatibilityTab","importedData","setImportedData","importFormat","setImportFormat","exportFormat","setExportFormat","editAboutTab","currentVal","editUsageTab","newFields","exportData","props","types","href","what","why","states","import","filter","fields","concat","JSON","stringify","YAML","importedResult","parse","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b341599.chunk.js","sourcesContent":["import React, { useState, Fragment } from 'react'\nimport YAML from 'yaml'\nimport './App.css'\n\nfunction PropsTable({ propDefs, editProp }) {\n  const [editingId, setEditingId] = useState(null)\n\n  if (!propDefs.length) {\n    return 'None'\n  }\n\n  return (\n    <table>\n      <tbody>\n        {propDefs.map(propDef => {\n          if (propDef.id === editingId) {\n            return (\n              <tr>\n                <td>\n                  <h3>Editing Prop</h3>\n                  <PropEditor\n                    prefilledValues={propDef}\n                    onSubmit={editedFields => {\n                      setEditingId(null)\n                      editProp(propDef.id, editedFields)\n                    }}\n                  />\n                </td>\n              </tr>\n            )\n          }\n\n          const {\n            id,\n            name,\n            description,\n            isRequired,\n            default: defaultValue,\n            notes,\n            example\n          } = propDef\n\n          return (\n            <tr>\n              <td>\n                <strong>{name}</strong>\n                <br />\n                <br />\n                {description}\n                <br />\n                <br />\n                <table>\n                  <tbody>\n                    <tr>\n                      <td>Is required</td>\n                      <td>{isRequired ? 'Yes' : 'No'}</td>\n                    </tr>\n                    <tr>\n                      <td>Default</td>\n                      <td>{defaultValue}</td>\n                    </tr>\n                    <tr>\n                      <td>Notes</td>\n                      <td>{notes}</td>\n                    </tr>\n                    <tr>\n                      <td>Example</td>\n                      <td>{example}</td>\n                    </tr>\n                  </tbody>\n                </table>\n                <br />\n                <button\n                  onClick={() => {\n                    setEditingId(id)\n                  }}\n                >\n                  Edit\n                </button>\n              </td>\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nfunction PropEditor({ prefilledValues, onSubmit }) {\n  const [fieldValues, setFieldValues] = useState(\n    prefilledValues || {\n      name: '',\n      description: '',\n      isRequired: false,\n      default: null,\n      notes: null,\n      example: null\n    }\n  )\n\n  const updateFieldValue = (name, value) =>\n    setFieldValues({ ...fieldValues, [name]: value })\n\n  return (\n    <form\n      onSubmit={e => {\n        onSubmit(fieldValues)\n        e.preventDefault()\n      }}\n    >\n      <table>\n        <thead>\n          <tr>\n            <td></td>\n            <td width=\"25%\"></td>\n            <td width=\"50%\"></td>\n            <td></td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Name</td>\n            <td>\n              <small>The name of the prop.</small>\n            </td>\n            <td>\n              <input\n                type=\"text\"\n                value={fieldValues.name}\n                onChange={e => updateFieldValue('name', e.target.value)}\n              />\n            </td>\n            <td>{fieldValues.name}</td>\n          </tr>\n          <tr>\n            <td>Description</td>\n            <td>\n              <small>Explain why it exists in one or two sentences max.</small>\n            </td>\n            <td>\n              <textarea\n                value={fieldValues.description}\n                onChange={e => updateFieldValue('description', e.target.value)}\n              />\n            </td>\n            <td>{fieldValues.description}</td>\n          </tr>\n          <tr>\n            <td>Type</td>\n            <td>\n              <small>\n                Always required. One of these values (make sure you keep the\n                formatting). If a Flow type use code style. Use a pipe for\n                multiple types. Use React Component(s) not the Flow type. eg:\n                <ul>\n                  <li>Number</li>\n                  <li>String</li>\n                  <li>Boolean</li>\n                  <li>String | Number</li>\n                  <li>(someVal: number) => void</li>\n                  <li>See Types / MyTypeName React Component(s)</li>\n                </ul>\n              </small>\n            </td>\n            <td>\n              <input\n                type=\"text\"\n                value={fieldValues.type}\n                onChange={e => updateFieldValue('type', e.target.value)}\n              />\n            </td>\n            <td>{fieldValues.type}</td>\n          </tr>\n          <tr>\n            <td>Is Required</td>\n            <td>\n              <small>\n                Does the component error or misbehave if this prop isn't\n                provided?\n              </small>\n            </td>\n            <td>\n              <input\n                type=\"checkbox\"\n                checked={fieldValues.isRequired}\n                onChange={() =>\n                  updateFieldValue('isRequired', !fieldValues.isRequired)\n                }\n              />\n            </td>\n            <td>{fieldValues.isRequired ? 'Yes' : 'No'}</td>\n          </tr>\n          <tr>\n            <td>Default</td>\n            <td>\n              <small>Only for optional props. Can leave empty.</small>\n            </td>\n            <td>\n              <input\n                type=\"text\"\n                value={fieldValues.default}\n                onChange={e => updateFieldValue('default', e.target.value)}\n              />\n            </td>\n            <td>{fieldValues.default}</td>\n          </tr>\n          <tr>\n            <td>Notes</td>\n            <td>\n              <small>\n                Things the consumer should know before they use it. eg. \"if you\n                do not provide enough array items it will throw an error\"\n              </small>\n            </td>\n            <td>\n              <textarea\n                value={fieldValues.notes}\n                onChange={e => updateFieldValue('notes', e.target.value)}\n              />\n            </td>\n            <td>{fieldValues.notes}</td>\n          </tr>\n          <tr>\n            <td>Example</td>\n            <td>\n              <small>\n                Help the consumer quickly use the prop. eg. an example array of\n                items\n              </small>\n            </td>\n            <td>\n              <textarea\n                value={fieldValues.example}\n                onChange={e => updateFieldValue('example', e.target.value)}\n              />\n            </td>\n            <td>{fieldValues.example}</td>\n          </tr>\n        </tbody>\n      </table>\n      <button type=\"submit\">Save</button>\n    </form>\n  )\n}\n\nfunction TypesTable({ typesDefs, editType }) {\n  const [editingId, setEditingId] = useState(null)\n\n  if (!typesDefs.length) {\n    return 'None'\n  }\n\n  return (\n    <table>\n      <tbody>\n        {typesDefs.map(typeDef => {\n          if (typeDef.id === editingId) {\n            return (\n              <tr>\n                <td>\n                  <h3>Editing Type</h3>\n                  <TypeEditor\n                    prefilledValues={typeDef}\n                    onSubmit={editedFields => {\n                      setEditingId(null)\n                      editType(typeDef.id, editedFields)\n                    }}\n                  />\n                </td>\n              </tr>\n            )\n          }\n\n          const { id, name, description, value } = typeDef\n\n          return (\n            <tr>\n              <td>\n                <strong>{name}</strong>\n                <br />\n                <br />\n                {description}\n                <br />\n                <br />\n                <code>{value}</code>\n                <br />\n                <button\n                  onClick={() => {\n                    setEditingId(id)\n                  }}\n                >\n                  Edit\n                </button>\n              </td>\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nfunction TypeEditor({ prefilledValues, onSubmit }) {\n  const [fieldValues, setFieldValues] = useState(\n    prefilledValues || {\n      name: '',\n      description: '',\n      value: ''\n    }\n  )\n\n  const updateFieldValue = (name, value) =>\n    setFieldValues({ ...fieldValues, [name]: value })\n\n  return (\n    <form\n      onSubmit={e => {\n        onSubmit(fieldValues)\n        e.preventDefault()\n      }}\n    >\n      <table>\n        <thead>\n          <tr>\n            <td></td>\n            <td width=\"25%\"></td>\n            <td width=\"50%\"></td>\n            <td></td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Name</td>\n            <td>\n              <small>The name of the Flow type.</small>\n            </td>\n            <td>\n              <input\n                type=\"text\"\n                value={fieldValues.name}\n                onChange={e => updateFieldValue('name', e.target.value)}\n              />\n            </td>\n            <td>{fieldValues.name}</td>\n          </tr>\n          <tr>\n            <td>Description</td>\n            <td>\n              <small>Explain why it exists in one or two sentences max.</small>\n            </td>\n            <td>\n              <textarea\n                value={fieldValues.description}\n                onChange={e => updateFieldValue('description', e.target.value)}\n              />\n            </td>\n            <td>{fieldValues.description}</td>\n          </tr>\n          <tr>\n            <td>Value</td>\n            <td></td>\n            <td>\n              <textarea\n                className=\"code\"\n                value={fieldValues.value}\n                onChange={e => updateFieldValue('value', e.target.value)}\n              />\n            </td>\n            <td>\n              <code>{fieldValues.value}</code>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <button type=\"submit\">Save</button>\n    </form>\n  )\n}\n\nconst formats = {\n  json: 'json',\n  yaml: 'yaml'\n}\n\nconst FormatSelector = ({ selectedFormat, onChange }) => (\n  <Fragment>\n    <input\n      type=\"radio\"\n      value={formats.json}\n      checked={selectedFormat === formats.json}\n      onChange={() => onChange(formats.json)}\n    />{' '}\n    JSON\n    <input\n      type=\"radio\"\n      value={formats.yaml}\n      checked={selectedFormat === formats.yaml}\n      onChange={() => onChange(formats.yaml)}\n    />{' '}\n    YAML\n  </Fragment>\n)\n\nfunction sortAlphabetically(arr) {\n  return arr.sort(({ name: nameA }, { name: nameB }) =>\n    nameA.localeCompare(nameB)\n  )\n}\n\nlet fieldId = 0\n\nfunction App() {\n  const [aboutTab, setAboutTab] = useState({})\n  const [usageTab, setUsageTab] = useState({})\n  const [propDefs, setPropDefs] = useState([])\n  const [typesDefs, setTypesDefs] = useState([])\n  const [compatibilityTab, setCompatibilityTab] = useState({})\n  const [importedData, setImportedData] = useState(null)\n  const [importFormat, setImportFormat] = useState(formats.json)\n  const [exportFormat, setExportFormat] = useState(formats.json)\n\n  const editAboutTab = (name, value) =>\n    setAboutTab(currentVal => ({\n      ...currentVal,\n      [name]: value\n    }))\n\n  const editUsageTab = (name, value) =>\n    setUsageTab(currentVal => ({\n      ...currentVal,\n      [name]: value\n    }))\n\n  const editProp = (id, newFields) => {\n    setPropDefs(currentVal =>\n      sortAlphabetically(\n        currentVal.map(propDef => {\n          if (propDef.id === id) {\n            return newFields\n          }\n          return newFields\n        })\n      )\n    )\n  }\n\n  const editType = (id, newFields) => {\n    setTypesDefs(currentVal =>\n      sortAlphabetically(\n        currentVal.map(propDef => {\n          if (propDef.id === id) {\n            return newFields\n          }\n          return newFields\n        })\n      )\n    )\n  }\n\n  const editCompatibilityTab = (name, value) =>\n    setCompatibilityTab(currentVal => ({\n      ...currentVal,\n      [name]: value\n    }))\n\n  const exportData = {\n    aboutTab,\n    usageTab,\n    props: propDefs,\n    types: typesDefs,\n    compatibilityTab\n  }\n\n  return (\n    <div className=\"App\">\n      <header>ZeroHeight Docs Generator</header>\n      <br />\n      <strong> NOTE:  </strong> When in doubt consult the current <a href=\"https://atomix.hexagonmining.com/\"> Atomix documentation </a> for reference.\n      <hr />\n      <h2>About Tab</h2>\n      <h3>What is my component?</h3>\n      <p>\n        A short paragraph explaining what the component is and what it is used\n        for. Do not go into too much depth - just summarise it.\n      </p>\n      <p>\n        eg. Checkbox is a interactive box that, when selected by the user, shows that a particular feature has been enabled or a particular option chosen.\n      </p>\n      <textarea\n        value={aboutTab.what}\n        onChange={e => editAboutTab('what', e.target.value)}\n      />\n      <h3>Why would I use this component?</h3>\n      <p>Explain why and when someone might consume your new component.</p>\n      <p>\n        eg. Checkbox should be used in cases where multiple selection is the most obvious use case. In use cases where only one selection of a group is allowed, use the radio button component instead of the checkbox.\n      </p>\n      <textarea\n        value={aboutTab.why}\n        onChange={e => editAboutTab('why', e.target.value)}\n      />\n      <h3>What are the different types?</h3>\n      <p>\n        How does the component change functionality depending on props.\n      </p>\n      <p>\n        eg. The checkbox has 2 style types, Round box and Square box.\n      </p>\n      <textarea\n        value={aboutTab.types}\n        onChange={e => editAboutTab('types', e.target.value)}\n      />\n      <h3>What are the different states?</h3>\n      <p>\n        Does the component change functionality or appearance if the \"state\"\n        changes.\n      </p>\n      <p>\n        eg. The checkbox component has different states: default, enabled, disabled, erroneous, loading\n      </p>\n      <textarea\n        value={aboutTab.states}\n        onChange={e => editAboutTab('states', e.target.value)}\n      />\n      <hr />\n      <h2>Usage Tab</h2>\n      <h3>Import</h3>\n      <p>The 1 line of code to import your component as a consumer</p>\n      <p>\n        eg.{' '}\n        <code>{`import MyComponent from 'atomix/molecules/MyComponent'`}</code>\n      </p>\n      <textarea\n        className=\"code\"\n        value={usageTab.import}\n        onChange={e => editUsageTab('import', e.target.value)}\n      />\n      <h3>Example</h3>\n      <p>\n        A minimal example of how to use the component. Similar to the sandbox\n        but even slimmer.\n      </p>\n      <p>\n        eg.{' '}\n        <code>{`import React, { useState } from 'react'\nimport MyComponent from 'atomix/molecules/MyComponent'\n\nconst MyExampleComponent = () => {\n  const [someState, setSomeState] = useState(false)\n\n  return <MyComponent something={someState} />\n}`}</code>\n      </p>\n      <textarea\n        className=\"code\"\n        value={usageTab.example}\n        onChange={e => editUsageTab('example', e.target.value)}\n      />\n      <hr />\n      <h2>Required Props</h2>\n      <PropsTable\n        propDefs={propDefs.filter(({ isRequired }) => isRequired)}\n        editProp={editProp}\n      />\n      <h2>Optional Props</h2>\n      <PropsTable\n        propDefs={propDefs.filter(({ isRequired }) => !isRequired)}\n        editProp={editProp}\n      />\n      <h2>Add Prop</h2>\n      <PropEditor\n        onSubmit={fields =>\n          setPropDefs(currentVal =>\n            sortAlphabetically(\n              currentVal.concat([{ ...fields, id: fieldId++ }])\n            )\n          )\n        }\n      />\n      <hr />\n      <h2>Flow Types</h2>\n      <TypesTable typesDefs={typesDefs} editType={editType} />\n      <h2>Add Flow Type</h2>\n      <TypeEditor\n        onSubmit={fields =>\n          setTypesDefs(currentVal =>\n            sortAlphabetically(\n              currentVal.concat([{ ...fields, id: fieldId++ }])\n            )\n          )\n        }\n      />\n      <hr />\n      <h2>Compatibility</h2>\n      <p>\n        What testing have you done in browsers and devices? We strongly\n        recommend you test on these browsers/devices:\n      </p>\n      <ul>\n        <li>Chrome (macOS or Windows)</li>\n        <li>Safari (macOS)</li>\n        <li>Firefox (macOS or Windows)</li>\n        <li>Edge (Windows - Chromium)</li>\n        <li>Chrome for Android</li>\n        <li>Safari (iOS)</li>\n      </ul>\n      <p>\n        List only the ones you have tested and dont forget to specify the version tested.\n        An example is shown below.\n      </p>\n      <p>\n        Tested on:\n        <ul>\n        <li>Chrome 22.44.10 for Windows</li>\n        <li>Safari 33.4 for macOS</li>\n        <li>Firefox 44.54 for macOS and Windows</li>\n      </ul>\n        Compatibility:\n        <ul>\n        <li>Desktop</li>\n        <li>Tablet</li>\n        <li>Mobile</li>\n        </ul>\n       \n      </p>\n      <textarea\n        className=\"code\"\n        value={compatibilityTab.value}\n        onChange={e => editCompatibilityTab('value', e.target.value)}\n      />\n      <hr />\n      <h2>Export</h2>\n      <p>\n        Export this JSON blob so other people can import it (eg. people\n        converting it for ZeroHeight).\n      </p>\n      <p>It automatically updates.</p>\n      <FormatSelector\n        onChange={setExportFormat}\n        selectedFormat={exportFormat}\n      />\n      <textarea\n        value={\n          exportFormat === formats.json\n            ? JSON.stringify(exportData, '', '\\t')\n            : YAML.stringify(exportData)\n        }\n      />\n      <hr />\n      <h2>Import</h2>\n      <p>Paste a JSON blob and it will fill in all of the fields above.</p>\n      <FormatSelector\n        onChange={setImportFormat}\n        selectedFormat={importFormat}\n      />\n      <textarea onChange={e => setImportedData(e.target.value)} />\n      <button\n        onClick={() => {\n          if (!importedData) return\n\n          const importedResult =\n            importFormat === formats.json\n              ? JSON.parse(importedData)\n              : YAML.parse(importedData)\n\n          setAboutTab(importedResult.aboutTab)\n          setUsageTab(importedResult.usageTab)\n          setPropDefs(sortAlphabetically(importedResult.props))\n          setTypesDefs(sortAlphabetically(importedResult.types))\n          setCompatibilityTab(importedResult.compatibilityTab)\n        }}\n      >\n        Apply\n      </button>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}